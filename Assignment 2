*** Q1  Sometimes the data has few duplicate values which will affect the analysis done. In this problem, you will be given a list. You have to find and delete the duplicates and print the updated list with no duplicates.

Input: A list of integers.

Output: A list of integers, with duplicates removed if any.

Sample input: [8, 9, 2, 2, 3, 4, 5, 2]

Sample output: [8, 9, 2, 3, 4, 5]

Sample input: [4, 4, 4, 4]

Sample output: [4]

Note the order of the data did not change in input and output.****

CODE:

duplicate_list=list(map(int,input().split()))
unique_set=set()
unique_list=list()
for num in duplicate_list:
    if num not in unique_set:
        unique_set.add(num)
        unique_list.append(num)
print(unique_list)


*** Q2 """You will be converting a dictionary, of string(keys) and list of string (values), to a list of strings. Please check the sample input/output for clarification.

Input: A dictionary with keys as strings and values as a list of strings.

Output: A list of strings

Sample input: {‘Mobile’: [‘Redmi’, ‘Samsung’, ‘Realme’], ‘Laptop’: [‘Dell’, ‘HP’], ‘TV’: [‘Videocon’, ‘Sony’] }

Sample output: [‘Mobile_Redmi’, ‘Mobile_Samsung’, ‘Mobile_Realme’, ‘Laptop_Dell’, ‘Laptop_HP’, ‘TV_Videocon’, ‘TV_Sony’]

Sample input: { 'Pen': ['Gel', 'Ink', 'ball'], 'Mobile': ['Android', 'apple'] }

Sample output: ['Pen_Gel', 'Pen_Ink', 'Pen_ball', 'Mobile_Android', 'Mobile_apple']"""

CODE:


def convert_dict_to_list(dictionary):
    solution=list()
    for key,value in dictionary.items():
        if(isinstance(value,list)):
            for i in value:
                val=key+"_"+i
                solution.append(val)
    print(solution)



input={"Mobile": ["Redmi", "Samsung", "Realme"], "Laptop": ["Dell", "HP"], "TV": ["Videocon", "Sony"] }
convert_dict_to_list(input)
input={ 'Pen': ['Gel', 'Ink', 'ball'], 'Mobile': ['Android', 'apple'] }
convert_dict_to_list(input) 



***"""Q4 You will be given a dictionary with keys as items and values as their prices. You have to print the cheapest item.

Sample input: A single line non-empty dictionary

Sample output: cheapest_item name: cheapest_item_cost

Sample input: {'mobile1':10000, 'mobile2':11000, 'mobile3':13000, 'mobile4':9000, 'mobile5':15000, 'mobile6':16000, 'mobile7':17000, 'mobile8':18000, 'mobile9':19000}

Sample output: mobile4: 9000

Note: in case of a tie, whichever item came first should be the output."""

CODE:


def find_min(dictionary):
    min_key=""
    min_val=float('inf')
    for key,value in dictionary.items():
        if value<min_val:
            min_val=value
            min_key=key
    print(min_key+":",min_val)

input={'mobile1':10000, 'mobile2':11000, 'mobile3':13000, 'mobile4':9000, 'mobile5':15000, 'mobile6':16000, 'mobile7':17000, 'mobile8':18000, 'mobile9':19000}
find_min(input)



"""Q5 You will be given a list of repeated elements. You have to find the maximum distance between two same elements. The answer will be zero if there are no repeated elements.

Input: A non-empty list of integers.

Output: A single integer denoting the maximum distance between two same integers.

Sample input: [1, 2, 3, 2, 5, 1, 2, 4, 6, 2, 7, 8, 6]

Sample output: 8

Explanation: Max distance for 1: 5 Max distance for 2: 8 Max distance for 3: 0 Max distance for 4: 0 Max distance for 5: 0 Max distance for 6: 4 Max distance for 7: 0 Max distance for 8: 0"""

def max_distance(input_list):
    list_dist=dict()
    for i in range(0,len(input_list)):
        if input_list[i] in list_dist:
            list_dist[input_list[i]].append(i)
        else:
            list_dist[input_list[i]]=[i]
    
    max_dist=-float('inf')
    for value in list_dist.values():
        length=len(value)
        if(max_dist<(value[length-1]-value[0])):
            max_dist=int(value[length-1])-int(value[0])
        
    print(max_dist)
input_list= [1, 2, 3, 2, 5, 1, 2, 4, 6, 2, 7, 8, 6]
max_distance(input_list)


"""Q6 Your team is going for camping and you are taking a vote to decide what food to pack for dinner. 
Everyone gets a vote and the food item that gets at least one more than half of the votes wins. 
None of the items wins if nothing gets at least one more than half votes. 
Assume that every person gets only one vote. 
The input will contain a list of food items where each occurrence of an item represents one vote. 
You should print the winning food item as output. If there is no clear winner, print "NOTA".

Sample Input: ["pasta","pasta","pasta","pasta","pasta","paratha","paratha","paratha"] Sample Output: pasta"""


def find_winner(input_list):
    input_dict=dict()
    for i in input_list:
        if i in input_dict:
            input_dict[i]+=1
        else:
            input_dict[i]=1
    length=len(input_list)
    for key,value in input_dict.items():
        if(value>length/2):
            print(key)
            return
    print("NOTA")
    return
    
input_list=["pasta","pasta","pasta","pasta","pasta","paratha","paratha","paratha"]
find_winner(input_list)



"""Q7 Consider a nested dictionary as follows:

{'Fruit': 1, 'Vegetable': {'Cabbage': 2, 'Cauliflower': 3}, 'Spices': 4}

Your task is to flatten a nested dictionary and join the nested keys with the "_" character. For the above dictionary, the flattened dictionary would be as follows:

{'Fruit': 1, 'Vegetable_Cabbage': 2, 'Vegetable_Cauliflower': 3, 'Spices': 4}

The input will have a nested dictionary.

The output should have two lists. The first list will have keys and the second list should have values. Both lists should be sorted."""



def flatten_dict(input_dict):
    flatten_dictionary=dict()
    for key,value in input_dict.items():
        if isinstance(value,dict):
            for i,j in value.items():
                flatten_dictionary[key+'_'+i]=j
        else:
            flatten_dictionary[key]=value
    return flatten_dictionary
def sort_keys(input_dictionary):
    key_list=list()
    for i in input_dictionary.keys():
        key_list.append(i)
    
    key_list.sort()
    return key_list
def sort_values(input_dictionary):
    value_list=list()
    for i in input_dictionary.values():
        value_list.append(i)
    
    value_list.sort()
    return value_list

input_dict={'Fruit': 1, 'Vegetable': {'Cabbage': 2, 'Cauliflower': 3}, 'Spices': 4}
output_dict=flatten_dict(input_dict)
sorted_keys=sort_keys(output_dict)
print(sorted_keys)
sorted_values=sort_values(output_dict)
print(sorted_values)



"""Q 8 In the binary search, you kept reducing the search space into half of the previous search space. In this question, can you similarly reduce the search space in one-third of the last space search and write a searching algorithm?

Input: A non-empty sorted list of unique integers in line one The integer key to be found in line two

Output: Index of the element key if it is present in the list, else -1

Sample input: [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27] 17

Sample output: 7

Sample input: [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27] 1

Sample output: -1"""

def ternary_search(arr,left,right,target):
    if(left>right):
        return -1
    if(left==right):
        if(arr[left]==target):
            return left
        return -1
    
    mid1=left+(right-left)//3
    mid2=right-(right-left)//3
    if(arr[mid1]==target):
        return mid1
    
    if(arr[mid2]==target):
        return mid2
    
    if(arr[mid1]>target):
        return ternary_search(arr,left,mid1-1,target)
    elif(arr[mid2]<target):
        return ternary_search(arr,mid2+1,right,target)
    else:
        return ternary_search(arr,mid1+1,mid2-1,target)
    
    
nums=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
answer1=ternary_search(nums,0,len(nums)-1,17)
print(answer1)
answer2=ternary_search(nums,0,len(nums)-1,1)
print(answer2)
